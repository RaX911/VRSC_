#!/bin/bash

# Colors for UI
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Animation characters
SPINNER=("⣷" "⣯" "⣟" "⡿" "⢿" "⣻" "⣽" "⣾")

# Function to display animated loading
show_loading() {
    local pid=$1
    local text=$2
    local spin_index=0
    
    while kill -0 $pid 2>/dev/null; do
        printf "\r${CYAN}${SPINNER[$spin_index]}${NC} ${text}..."
        spin_index=$(( (spin_index + 1) % ${#SPINNER[@]} ))
        sleep 0.1
    done
    printf "\r${GREEN}✓${NC} ${text} completed!\n"
}

# Function to progress bar
progress_bar() {
    local duration=$1
    local text=$2
    local steps=50
    
    for ((i=0; i<=steps; i++)); do
        percentage=$((i * 2))
        filled=$((i * 50 / steps))
        empty=$((50 - filled))
        
        printf "\r${CYAN}[${NC}"
        printf "%0.s#${GREEN}" $(seq 1 $filled)
        printf "%0.s-${NC}" $(seq 1 $empty)
        printf "${CYAN}]${NC} ${text} ${percentage}%%"
        sleep $(echo "scale=2; $duration/$steps" | bc -l 2>/dev/null || sleep 0.1)
    done
    printf "\n"
}

# Function to print header
print_header() {
    clear
    echo -e "${PURPLE}"
    echo "╔══════════════════════════════════════════════════════════╗"
    echo "║                 VERUS COIN MINER SETUP                  ║"
    echo "║                 Auto Install & Manager                  ║"
    echo "║                 All Platform Support                    ║"
    echo "╚══════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

# Function to check and install proot-distro
install_proot_distro() {
    if ! command -v proot-distro &> /dev/null; then
        echo -e "${YELLOW}Installing proot-distro...${NC}"
        (pkg update -y && pkg install proot-distro -y) > /dev/null 2>&1 &
        show_loading $! "Installing proot-distro"
    fi
}

# Function to install Ubuntu via proot-distro
install_ubuntu() {
    if ! proot-distro list | grep -q "ubuntu"; then
        echo -e "${YELLOW}Installing Ubuntu...${NC}"
        (proot-distro install ubuntu -y) > /dev/null 2>&1 &
        show_loading $! "Installing Ubuntu distribution"
    fi
}

# Function to setup mining environment in Ubuntu
setup_mining_environment() {
    echo -e "${YELLOW}Setting up mining environment in Ubuntu...${NC}"
    
    # Create setup script directly in Ubuntu environment
    proot-distro login ubuntu -- bash -c "
        # Update and upgrade system
        echo 'Updating system packages...'
        apt update -y
        apt upgrade -y
        
        # Install dependencies
        echo 'Installing mining dependencies...'
        apt-get install -y libcurl4-openssl-dev libssl-dev libjansson-dev automake autotools-dev build-essential git
        
        # Clone and build ccminer
        echo 'Building ccminer...'
        cd ~
        git clone --single-branch -b ARM https://github.com/monkins1010/ccminer.git
        cd ccminer
        chmod +x build.sh
        ./build.sh
        make
        make install
        
        echo 'Mining environment setup completed!'
    "
}

# Function to create miner script
create_miner_script() {
    local wallet=$1
    local pool=$2
    local port=$3
    local name=$4
    
    # Create miner script directly in Ubuntu environment
    proot-distro login ubuntu -- bash -c "
        cat > /root/start_mining.sh << EOF
#!/bin/bash

WALLET=\"$wallet\"
POOL=\"$pool\"
PORT=\"$port\"
WORKER_NAME=\"$name\"
THREADS=\\\$(nproc)

cd /root/ccminer

echo \"Miner Configuration:\"
echo \"Pool: \\\$POOL:\\\$PORT\"
echo \"Wallet: \\\$WALLET\"
echo \"Worker: \\\$WORKER_NAME\"
echo \"Threads: \\\$THREADS\"
echo \"Starting miner...\"

while true; do
    ./ccminer -a verus -o stratum+tcp://\\\${POOL}:\\\${PORT} -u \\\${WALLET}.\\\${WORKER_NAME} -p hybrid -t \\\$THREADS
    echo \"[\\\$(date '+%Y-%m-%d %H:%M:%S')] Miner crashed, restarting in 10 seconds...\"
    sleep 10
done
EOF

        chmod +x /root/start_mining.sh
        echo 'Miner script created successfully!'
    "
}

# Function to start mining
start_mining() {
    local wallet=$1
    local pool_choice=$2
    local worker_name=$3
    
    case $pool_choice in
        1)
            POOL="sg.vipor.net"
            PORT="5040"
            POOL_NAME="Vipor.net SG"
            ;;
        2)
            POOL="eu.luckpool.net"
            PORT="3956"
            POOL_NAME="Luckpool EU"
            ;;
        3)
            POOL="na.luckpool.net"
            PORT="3956"
            POOL_NAME="Luckpool NA"
            ;;
        4)
            POOL="ap.luckpool.net"
            PORT="3956"
            POOL_NAME="Luckpool Asia"
            ;;
        *)
            echo -e "${RED}Invalid pool selection!${NC}"
            return 1
            ;;
    esac
    
    echo -e "${GREEN}Starting miner with configuration:${NC}"
    echo -e "Pool: ${CYAN}$POOL_NAME${NC}"
    echo -e "Address: ${CYAN}$POOL:$PORT${NC}"
    echo -e "Wallet: ${CYAN}$wallet${NC}"
    echo -e "Worker: ${CYAN}$worker_name${NC}"
    echo
    
    create_miner_script "$wallet" "$POOL" "$PORT" "$worker_name"
    
    echo -e "${YELLOW}Launching miner in Ubuntu environment...${NC}"
    echo -e "${GREEN}Miner started! Press Ctrl+C to stop mining.${NC}"
    echo -e "${CYAN}Mining logs:${NC}"
    echo "══════════════════════════════════════════════════════════"
    
    proot-distro login ubuntu -- bash /root/start_mining.sh
}

# Function to detect cloud platform
detect_cloud_platform() {
    if curl -s -m 5 http://169.254.169.254/latest/meta-data/ | grep -q instance-id; then
        echo "aws"
    elif curl -s -m 5 -H "Metadata-Flavor: Google" http://169.254.169.254/computeMetadata/v1/instance/ | grep -q id; then
        echo "gcp"
    elif curl -s -m 5 -H "Metadata: true" http://169.254.169.254/metadata/instance | grep -q vmId; then
        echo "azure"
    elif hostname | grep -q "digitalocean"; then
        echo "digitalocean"
    elif command -v dmidecode >/dev/null 2>&1 && sudo dmidecode -s system-manufacturer | grep -q "Oracle"; then
        echo "oracle"
    elif [ -f /etc/cloud/platform ] && grep -q "linode" /etc/cloud/platform; then
        echo "linode"
    elif command -v virt-what >/dev/null 2>&1; then
        local virt=$(virt-what)
        if [ -n "$virt" ]; then
            echo "$virt"
        else
            echo "baremetal"
        fi
    else
        echo "unknown"
    fi
}

# Function to install cloud CPU optimization
install_cloud_cpu_optimization() {
    local platform=$1
    
    echo -e "${YELLOW}Installing CPU optimization for $platform...${NC}"
    
    proot-distro login ubuntu -- bash -c "
        # Install system monitoring and optimization tools
        apt update -y
        apt install -y htop iotop nethogs sysstat cpufrequtils tuned-utils
        
        # Platform-specific optimizations
        case '$platform' in
            'aws')
                # AWS specific optimizations
                echo 'Applying AWS EC2 optimizations...'
                # Install AWS enhanced networking (if applicable)
                apt install -y linux-aws-tools-common
                # CPU governor optimization
                echo 'performance' | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor
                ;;
            'gcp')
                # Google Cloud specific optimizations
                echo 'Applying Google Cloud optimizations...'
                # GCP tools and optimizations
                apt install -y google-compute-engine-tools
                # Memory and CPU optimization
                sysctl -w vm.dirty_ratio=10
                sysctl -w vm.dirty_background_ratio=5
                ;;
            'azure')
                # Azure specific optimizations
                echo 'Applying Azure optimizations...'
                # Azure Linux Agent and optimizations
                apt install -y walinuxagent
                # Disk and CPU optimization
                echo 'none' > /sys/block/sda/queue/scheduler
                ;;
            'oracle')
                # Oracle Cloud specific optimizations
                echo 'Applying Oracle Cloud optimizations...'
                # Oracle Cloud optimizations
                apt install -y oracle-cloud-agent
                # Network and CPU tuning
                sysctl -w net.core.rmem_max=16777216
                sysctl -w net.core.wmem_max=16777216
                ;;
            *)
                # Generic cloud optimizations
                echo 'Applying generic cloud optimizations...'
                # Set CPU governor to performance
                if command -v cpufreq-set >/dev/null 2>&1; then
                    for cpu in /sys/devices/system/cpu/cpu*/cpufreq; do
                        echo 'performance' | tee \$cpu/scaling_governor
                    done
                fi
                # Optimize swappiness
                sysctl -w vm.swappiness=10
                # Optimize dirty ratios
                sysctl -w vm.dirty_ratio=15
                sysctl -w vm.dirty_background_ratio=5
                ;;
        esac
        
        # Common optimizations for all platforms
        echo 'Applying common optimizations...'
        
        # Increase file descriptors
        ulimit -n 65536
        echo '* soft nofile 65536' >> /etc/security/limits.conf
        echo '* hard nofile 65536' >> /etc/security/limits.conf
        
        # Kernel optimizations for mining
        sysctl -w net.core.somaxconn=65536
        sysctl -w net.ipv4.tcp_max_syn_backlog=65536
        sysctl -w net.ipv4.tcp_tw_reuse=1
        sysctl -w net.ipv4.ip_local_port_range='1024 65535'
        
        # Disable transparent hugepages for better performance
        echo 'never' > /sys/kernel/mm/transparent_hugepage/enabled
        echo 'never' > /sys/kernel/mm/transparent_hugepage/defrag
        
        # Create optimization script
        cat > /root/cloud_optimize.sh << 'EOF'
#!/bin/bash
# Cloud CPU Optimization Script

echo \"Applying cloud CPU optimizations...\"

# Set CPU governor to performance
if [ -d /sys/devices/system/cpu/cpu0/cpufreq ]; then
    for cpu in /sys/devices/system/cpu/cpu*/cpufreq; do
        echo 'performance' | tee \$cpu/scaling_governor 2>/dev/null
    done
    echo \"CPU governor set to performance\"
fi

# Disable frequency scaling
if command -v cpupower >/dev/null 2>&1; then
    cpupower frequency-set -g performance
fi

# Optimize IRQ balance
if command -v irqbalance >/dev/null 2>&1; then
    systemctl enable irqbalance
    systemctl start irqbalance
fi

echo \"Cloud CPU optimizations applied successfully!\"
EOF

        chmod +x /root/cloud_optimize.sh
        echo 'Cloud optimization script created!'
    "
}

# Function to setup virtual CPU cloud
setup_virtual_cpu_cloud() {
    print_header
    echo -e "${YELLOW}Setting up Virtual CPU Cloud Environment...${NC}"
    
    # Detect current platform
    echo -e "${CYAN}Detecting cloud platform...${NC}"
    local platform=$(detect_cloud_platform)
    echo -e "${GREEN}Detected platform: $platform${NC}"
    
    progress_bar 3 "Initializing cloud setup"
    
    # Install proot-distro if not exists
    install_proot_distro
    
    # Install Ubuntu
    install_ubuntu
    
    # Setup mining environment
    setup_mining_environment
    
    # Install cloud-specific optimizations
    install_cloud_cpu_optimization "$platform"
    
    echo -e "${GREEN}Virtual CPU Cloud setup completed successfully!${NC}"
    echo -e "${CYAN}Platform: $platform${NC}"
    echo -e "${CYAN}Optimizations applied for better mining performance${NC}"
}

# Function to install virtual CPU cloud
install_virtual_cpu() {
    print_header
    echo -e "${YELLOW}Installing Virtual CPU Cloud Environment...${NC}"
    
    progress_bar 5 "Setting up virtual CPU environment"
    
    # Install additional packages for virtualization
    proot-distro login ubuntu -- bash -c "
        echo 'Updating package lists...'
        apt update -y
        echo 'Installing system monitoring tools...'
        apt install -y htop neofetch screen tmux curl wget
        echo 'Virtual CPU environment ready!'
    "
    
    echo -e "${GREEN}Virtual CPU Cloud installed successfully!${NC}"
    echo -e "${CYAN}You can now run multiple mining instances using screen/tmux sessions.${NC}"
}

# Function to show main menu
show_menu() {
    while true; do
        print_header
        echo -e "${CYAN}Select an option:${NC}"
        echo -e "1) ${YELLOW}Auto Setup Mining Environment${NC}"
        echo -e "2) ${YELLOW}Start Verus Mining${NC}"
        echo -e "3) ${YELLOW}Install Virtual CPU Cloud${NC}"
        echo -e "4) ${YELLOW}Setup Virtual CPU Cloud (All Platforms)${NC}"
        echo -e "5) ${YELLOW}Check System Info${NC}"
        echo -e "6) ${YELLOW}Update Miner${NC}"
        echo -e "7) ${YELLOW}Exit${NC}"
        echo
        read -p "Enter your choice (1-7): " choice
        
        case $choice in
            1)
                auto_setup
                ;;
            2)
                mining_menu
                ;;
            3)
                install_virtual_cpu
                ;;
            4)
                setup_virtual_cpu_cloud
                ;;
            5)
                check_system_info
                ;;
            6)
                update_miner
                ;;
            7)
                echo -e "${GREEN}Thank you for using Verus Miner!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid choice! Please try again.${NC}"
                sleep 2
                ;;
        esac
        echo
        read -p "Press Enter to continue..."
    done
}

# Function for auto setup
auto_setup() {
    print_header
    echo -e "${YELLOW}Starting automatic setup...${NC}"
    
    progress_bar 3 "Initializing system setup"
    
    # Install proot-distro if not exists
    install_proot_distro
    
    # Install Ubuntu
    install_ubuntu
    
    # Setup mining environment
    setup_mining_environment
    
    echo -e "${GREEN}Auto setup completed successfully!${NC}"
}

# Function for mining menu
mining_menu() {
    print_header
    echo -e "${CYAN}Verus Mining Configuration${NC}"
    echo
    
    read -p "Enter your Verus wallet address: " wallet
    if [ -z "$wallet" ]; then
        echo -e "${RED}Wallet address cannot be empty!${NC}"
        return
    fi
    
    echo
    echo -e "${CYAN}Select mining pool:${NC}"
    echo -e "1) ${YELLOW}Vipor.net (Singapore) - sg.vipor.net:5040${NC}"
    echo -e "2) ${YELLOW}Luckpool (Europe) - eu.luckpool.net:3956${NC}"
    echo -e "3) ${YELLOW}Luckpool (North America) - na.luckpool.net:3956${NC}"
    echo -e "4) ${YELLOW}Luckpool (Asia) - ap.luckpool.net:3956${NC}"
    echo
    
    read -p "Select pool (1-4): " pool_choice
    read -p "Enter worker name: " worker_name
    
    if [ -z "$worker_name" ]; then
        worker_name="worker01"
    fi
    
    start_mining "$wallet" "$pool_choice" "$worker_name"
}

# Function to check system info
check_system_info() {
    print_header
    echo -e "${CYAN}System Information:${NC}"
    echo "══════════════════════════════════════════════════════════"
    
    # Get system info
    echo -e "${YELLOW}Host System Information:${NC}"
    echo "OS: $(uname -o) $(uname -s)"
    echo "Architecture: $(uname -m)"
    echo "Kernel: $(uname -r)"
    echo
    
    echo -e "${YELLOW}CPU Information:${NC}"
    if command -v nproc &> /dev/null; then
        echo "CPU Cores: $(nproc)"
    fi
    if command -v lscpu &> /dev/null; then
        lscpu | grep "Model name" | head -1
    fi
    echo
    
    echo -e "${YELLOW}Memory Information:${NC}"
    if command -v free &> /dev/null; then
        free -h
    fi
    echo
    
    # Detect cloud platform
    local platform=$(detect_cloud_platform)
    echo -e "${YELLOW}Cloud Platform:${NC} $platform"
    echo
    
    # Check if Ubuntu environment exists
    if proot-distro list | grep -q "ubuntu"; then
        echo -e "${GREEN}✓ Ubuntu environment installed${NC}"
        
        # Get info from Ubuntu environment
        echo -e "${YELLOW}Ubuntu Environment Info:${NC}"
        proot-distro login ubuntu -- bash -c "
            echo 'CPU Cores: \$(nproc)'
            echo 'Ubuntu Version: \$(cat /etc/issue)'
            if [ -d ~/ccminer ]; then
                echo 'Miner: Present in ~/ccminer'
            else
                echo 'Miner: Not installed'
            fi
            if [ -f ~/cloud_optimize.sh ]; then
                echo 'Cloud Optimization: Installed'
            else
                echo 'Cloud Optimization: Not installed'
            fi
        "
    else
        echo -e "${RED}✗ Ubuntu environment not installed${NC}"
    fi
}

# Function to update miner
update_miner() {
    print_header
    echo -e "${YELLOW}Updating Verus Miner...${NC}"
    
    if proot-distro list | grep -q "ubuntu"; then
        proot-distro login ubuntu -- bash -c "
            cd ~
            if [ -d ccminer ]; then
                echo 'Updating ccminer...'
                cd ccminer
                git pull
                ./build.sh
                make
                make install
                echo 'Miner updated successfully!'
            else
                echo 'Miner not found. Please run auto setup first.'
            fi
        "
    else
        echo -e "${RED}Ubuntu environment not found. Please run auto setup first.${NC}"
    fi
}

# Main execution
main() {
    # Check if running in Linux/Android
    if [ "$(uname -o)" != "Android" ] && [ "$(uname -s)" != "Linux" ]; then
        echo -e "${RED}This script is designed for Linux and Android systems!${NC}"
        exit 1
    fi
    
    print_header
    echo -e "${GREEN}Verus Coin Miner - All Platform Support${NC}"
    echo -e "${YELLOW}Supported: Linux, Android (Termux), Cloud Platforms${NC}"
    echo -e "${YELLOW}Cloud Support: AWS, Google Cloud, Azure, Oracle, DigitalOcean, Linode${NC}"
    echo
    
    # Start main menu
    show_menu
}

# Run main function
main "$@"
