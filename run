#!/bin/bash

# Colors for UI
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Animation function
animate_loading() {
    local percent=0
    local width=50
    local chars=("▰" "▱")
    
    echo -e "\n${CYAN}Loading Progress:${NC}"
    
    while [ $percent -le 100 ]; do
        local filled=$((width * percent / 100))
        local empty=$((width - filled))
        local bar=""
        
        for ((i=0; i<filled; i++)); do
            bar+="${chars[0]}"
        done
        
        for ((i=0; i<empty; i++)); do
            bar+="${chars[1]}"
        done
        
        # Animation effects
        case $((percent % 4)) in
            0) local anim="◐" ;;
            1) local anim="◓" ;;
            2) local anim="◑" ;;
            3) local anim="◒" ;;
        esac
        
        printf "\r${GREEN}[%s]${NC} %3d%% %s " "$bar" "$percent" "$anim"
        
        # Simulate work based on current operation
        case $1 in
            "update") sleep 0.02 ;;
            "install") sleep 0.01 ;;
            "build") sleep 0.03 ;;
            "mining") sleep 0.05 ;;
            *) sleep 0.01 ;;
        esac
        
        percent=$((percent + 1))
    done
    printf "\r${GREEN}[%s]${NC} %3d%% ${GREEN}✓${NC}\n" "$bar" "100"
}

# Function to display banner
show_banner() {
    clear
    echo -e "${PURPLE}"
    echo "╔══════════════════════════════════════════════════════════╗"
    echo "║                 VERUS COIN MINER SETUP                  ║"
    echo "║              Auto Install & Configuration               ║"
    echo "║                   Multi-Pool Support                    ║"
    echo "╚══════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

# Function to install proot-distro and select OS
install_proot_distro() {
    echo -e "\n${BLUE}=== PROOT-DISTRO INSTALLATION ===${NC}"
    
    # Check if proot-distro is installed
    if ! command -v proot-distro &> /dev/null; then
        echo -e "${YELLOW}Installing proot-distro...${NC}"
        animate_loading "install" &
        loading_pid=$!
        
        pkg update -y > /dev/null 2>&1
        pkg install proot-distro -y > /dev/null 2>&1
        
        wait $loading_pid
        echo -e "${GREEN}proot-distro installed successfully!${NC}"
    else
        echo -e "${GREEN}proot-distro is already installed.${NC}"
    fi
    
    # OS selection menu
    echo -e "\n${CYAN}Available Linux Distributions:${NC}"
    echo -e "1) Ubuntu"
    echo -e "2) Debian" 
    echo -e "3) Alpine"
    echo -e "4) Arch Linux"
    echo -e "5) Fedora"
    echo -e "6) Manjaro"
    
    read -p "Select OS (1-6, default 1): " os_choice
    case $os_choice in
        1) os_name="ubuntu" ;;
        2) os_name="debian" ;;
        3) os_name="alpine" ;;
        4) os_name="archlinux" ;;
        5) os_name="fedora" ;;
        6) os_name="manjaro-aarch64" ;;
        *) os_name="ubuntu" ;;
    esac
    
    echo -e "${YELLOW}Installing $os_name...${NC}"
    animate_loading "install" &
    loading_pid=$!
    
    # Install selected OS
    proot-distro install $os_name > /dev/null 2>&1
    
    wait $loading_pid
    echo -e "${GREEN}$os_name installed successfully!${NC}"
    
    # Create startup script for the OS
    create_startup_script $os_name
}

# Function to create startup script
create_startup_script() {
    local os=$1
    cat > ~/start-mining.sh << EOF
#!/bin/bash
echo -e "${GREEN}Starting $os environment...${NC}"
proot-distro login $os -- bash -c "
cd /root
./miner-setup.sh
"
EOF
    chmod +x ~/start-mining.sh
}

# Function to install mining software in proot environment
install_mining_software() {
    local os=$1
    
    # Create setup script for proot environment
    cat > /data/data/com.termux/files/usr/var/lib/proot-distro/installed-rootfs/$os/root/miner-setup.sh << 'EOF'
#!/bin/bash

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Update system
echo -e "${BLUE}Updating system packages...${NC}"
apt update && apt upgrade -y

# Install dependencies
echo -e "${BLUE}Installing dependencies...${NC}"
apt install -y git build-essential automake autotools-dev libcurl4-openssl-dev libssl-dev libjansson-dev libgmp-dev zlib1g-dev

# Clone and build miner
echo -e "${BLUE}Downloading and building ccminer...${NC}"
cd /root
if [ -d "ccminer" ]; then
    echo -e "${YELLOW}Removing existing ccminer directory...${NC}"
    rm -rf ccminer
fi

git clone --single-branch -b ARM https://github.com/monkins1010/ccminer.git
cd ccminer

echo -e "${YELLOW}Building miner (this may take a while)...${NC}"
chmod +x build.sh
./build.sh

# Check if build was successful
if [ -f "ccminer" ]; then
    echo -e "${GREEN}Build successful! ccminer executable created.${NC}"
    chmod +x ccminer
else
    echo -e "${RED}Build failed! Checking for alternative build method...${NC}"
    # Try alternative build method
    make clean
    ./autogen.sh
    ./configure --with-crypto --with-curl
    make
    if [ -f "ccminer" ]; then
        echo -e "${GREEN}Alternative build successful!${NC}"
        chmod +x ccminer
    else
        echo -e "${RED}Build still failed. Please check dependencies.${NC}"
        exit 1
    fi
fi

echo -e "${GREEN}Miner installation completed!${NC}"

# Display miner version
echo -e "${BLUE}Miner version info:${NC}"
./ccminer --version || echo -e "${YELLOW}Version check not available, but miner is built.${NC}"

cd /root

EOF

    chmod +x /data/data/com.termux/files/usr/var/lib/proot-distro/installed-rootfs/$os/root/miner-setup.sh
}

# Function to verify miner installation
verify_miner_installation() {
    local os=$1
    
    echo -e "${YELLOW}Verifying miner installation...${NC}"
    
    # Create verification script
    cat > /data/data/com.termux/files/usr/var/lib/proot-distro/installed-rootfs/$os/root/verify-miner.sh << 'EOF'
#!/bin/bash

echo -e "=== MINER VERIFICATION ==="
cd /root/ccminer

if [ -f "ccminer" ]; then
    echo -e "✓ ccminer executable found"
    if [ -x "ccminer" ]; then
        echo -e "✓ ccminer is executable"
        echo -e "✓ Miner installation verified successfully!"
        exit 0
    else
        echo -e "✗ ccminer is not executable, fixing permissions..."
        chmod +x ccminer
        if [ -x "ccminer" ]; then
            echo -e "✓ Permissions fixed successfully!"
            exit 0
        else
            echo -e "✗ Failed to fix permissions"
            exit 1
        fi
    fi
else
    echo -e "✗ ccminer executable not found!"
    echo -e "Available files in ccminer directory:"
    ls -la
    exit 1
fi

EOF

    chmod +x /data/data/com.termux/files/usr/var/lib/proot-distro/installed-rootfs/$os/root/verify-miner.sh
    
    # Run verification
    if proot-distro login $os -- ./verify-miner.sh; then
        echo -e "${GREEN}Miner verification successful!${NC}"
        return 0
    else
        echo -e "${RED}Miner verification failed!${NC}"
        return 1
    fi
}

# Function to show pool selection
select_pool() {
    echo -e "\n${CYAN}=== MINING POOL SELECTION ===${NC}"
    echo -e "${BLUE}VIPOR.NET POOLS:${NC}"
    echo -e "1)  Singapore (Asia)    - sg.vipor.net:5040"
    echo -e "2)  Europe (Central)    - eu.vipor.net:5040" 
    echo -e "3)  USA (West)          - us.vipor.net:5040"
    echo -e "4)  Japan (Asia)        - jp.vipor.net:5040"
    echo -e "5)  Australia (Oceania) - au.vipor.net:5040"
    echo -e "6)  Canada (North Am.)  - ca.vipor.net:5040"
    echo -e "7)  Germany (Europe)    - de.vipor.net:5040"
    echo -e "8)  France (Europe)     - fr.vipor.net:5040"
    echo -e "9)  UK (Europe)         - uk.vipor.net:5040"
    echo -e "10) Brazil (South Am.)  - br.vipor.net:5040"
    echo -e "11) India (Asia)        - in.vipor.net:5040"
    echo
    echo -e "${BLUE}LUCKPOOL POOLS:${NC}"
    echo -e "12) Europe              - eu.luckpool.net:3956"
    echo -e "13) North America       - na.luckpool.net:3956"
    echo -e "14) Asia Pacific        - ap.luckpool.net:3956"
    echo -e "15) Custom Pool         - Enter custom pool address"
    echo
    
    read -p "Select pool (1-15): " pool_choice
    
    case $pool_choice in
        1) pool="sg.vipor.net:5040" ;;
        2) pool="eu.vipor.net:5040" ;;
        3) pool="us.vipor.net:5040" ;;
        4) pool="jp.vipor.net:5040" ;;
        5) pool="au.vipor.net:5040" ;;
        6) pool="ca.vipor.net:5040" ;;
        7) pool="de.vipor.net:5040" ;;
        8) pool="fr.vipor.net:5040" ;;
        9) pool="uk.vipor.net:5040" ;;
        10) pool="br.vipor.net:5040" ;;
        11) pool="in.vipor.net:5040" ;;
        12) pool="eu.luckpool.net:3956" ;;
        13) pool="na.luckpool.net:3956" ;;
        14) pool="ap.luckpool.net:3956" ;;
        15) read -p "Enter custom pool (host:port): " pool ;;
        *) pool="sg.vipor.net:5040" ;;
    esac
    
    read -p "Enter your Verus wallet address: " wallet
    read -p "Enter worker name (default: worker1): " worker
    worker=${worker:-worker1}
    
    echo -e "${GREEN}Pool configured: $pool${NC}"
    echo -e "${GREEN}Wallet: $wallet${NC}"
    echo -e "${GREEN}Worker: $worker${NC}"
}

# Function to create mining script
create_mining_script() {
    local os=$1
    local pool=$2
    local wallet=$3
    local worker=$4
    
    cat > /data/data/com.termux/files/usr/var/lib/proot-distro/installed-rootfs/$os/root/start-mining.sh << EOF
#!/bin/bash

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${BLUE}=== VERUS COIN MINER ===${NC}"
echo -e "${GREEN}Pool: $pool${NC}"
echo -e "${GREEN}Wallet: $wallet${NC}"
echo -e "${GREEN}Worker: $worker${NC}"

# Verify miner exists before starting
cd /root/ccminer

if [ ! -f "ccminer" ]; then
    echo -e "${RED}ERROR: ccminer executable not found!${NC}"
    echo -e "${YELLOW}Please run miner installation first.${NC}"
    exit 1
fi

if [ ! -x "ccminer" ]; then
    echo -e "${YELLOW}Setting execute permissions...${NC}"
    chmod +x ccminer
fi

echo -e "${YELLOW}Starting miner...${NC}"
echo -e "${BLUE}Press Ctrl+C to stop mining${NC}"

while true; do
    ./ccminer -a verus -o stratum+tcp://$pool -u $wallet.$worker -p hybrid -t 100
    exit_code=\$?
    echo -e "${YELLOW}Miner stopped with exit code: \$exit_code${NC}"
    echo -e "${YELLOW}Restarting in 10 seconds...${NC}"
    sleep 10
done

EOF

    chmod +x /data/data/com.termux/files/usr/var/lib/proot-distro/installed-rootfs/$os/root/start-mining.sh
}

# Function to install virtual CPU/cloud tools
install_virtual_cpu() {
    echo -e "\n${BLUE}=== VIRTUAL CPU/CLOUD TOOLS ===${NC}"
    echo -e "${CYAN}Installing cloud and virtualization tools...${NC}"
    
    animate_loading "install" &
    loading_pid=$!
    
    pkg update -y > /dev/null 2>&1
    pkg install cloudflared aws-cli python python-pip -y > /dev/null 2>&1
    pip install requests > /dev/null 2>&1
    
    wait $loading_pid
    echo -e "${GREEN}Virtual CPU tools installed!${NC}"
}

# Function to fix common issues
fix_common_issues() {
    echo -e "\n${BLUE}=== FIXING COMMON ISSUES ===${NC}"
    
    if [ -z "$os_name" ]; then
        os_name="ubuntu"
    fi
    
    echo -e "${YELLOW}Checking and fixing common problems...${NC}"
    
    # Fix permissions in proot environment
    proot-distro login $os_name -- bash -c "
        cd /root
        if [ -d "ccminer" ]; then
            cd ccminer
            chmod +x build.sh 2>/dev/null
            chmod +x ccminer 2>/dev/null
            echo 'Permissions fixed in ccminer directory'
        fi
    " > /dev/null 2>&1
    
    echo -e "${GREEN}Common issues fixed!${NC}"
}

# Main menu function
main_menu() {
    while true; do
        show_banner
        echo -e "${CYAN}=== MAIN MENU ===${NC}"
        echo -e "1) Install Proot-Distro & Linux OS"
        echo -e "2) Configure Mining Pool"
        echo -e "3) Install Mining Software"
        echo -e "4) Verify Miner Installation"
        echo -e "5) Install Virtual CPU Tools"
        echo -e "6) Fix Common Issues"
        echo -e "7) Start Mining"
        echo -e "8) Auto Setup Everything"
        echo -e "9) Exit"
        echo
        
        read -p "Select option (1-9): " main_choice
        
        case $main_choice in
            1) 
                install_proot_distro
                read -p "Press Enter to continue..."
                ;;
            2)
                select_pool
                read -p "Press Enter to continue..."
                ;;
            3)
                if [ -z "$os_name" ]; then
                    os_name="ubuntu"
                fi
                echo -e "${YELLOW}Installing mining software in $os_name...${NC}"
                install_mining_software $os_name
                echo -e "${YELLOW}Building miner (please wait)...${NC}"
                if proot-distro login $os_name -- ./miner-setup.sh; then
                    echo -e "${GREEN}Mining software installed!${NC}"
                else
                    echo -e "${RED}Installation failed! Check dependencies.${NC}"
                fi
                read -p "Press Enter to continue..."
                ;;
            4)
                if [ -z "$os_name" ]; then
                    echo -e "${RED}Please install OS first!${NC}"
                else
                    verify_miner_installation $os_name
                fi
                read -p "Press Enter to continue..."
                ;;
            5)
                install_virtual_cpu
                read -p "Press Enter to continue..."
                ;;
            6)
                fix_common_issues
                read -p "Press Enter to continue..."
                ;;
            7)
                if [ -z "$pool" ] || [ -z "$wallet" ]; then
                    echo -e "${RED}Please configure pool and wallet first!${NC}"
                    read -p "Press Enter to continue..."
                    continue
                fi
                if [ -z "$os_name" ]; then
                    os_name="ubuntu"
                fi
                
                # Verify miner before starting
                if verify_miner_installation $os_name; then
                    echo -e "${GREEN}Starting mining operation...${NC}"
                    create_mining_script $os_name $pool $wallet $worker
                    proot-distro login $os_name -- ./start-mining.sh
                else
                    echo -e "${RED}Cannot start mining: miner not properly installed${NC}"
                    read -p "Press Enter to continue..."
                fi
                ;;
            8)
                echo -e "${YELLOW}Starting complete auto-setup...${NC}"
                # Auto setup sequence
                if [ -z "$os_name" ]; then
                    os_name="ubuntu"
                fi
                install_proot_distro
                select_pool
                install_mining_software $os_name
                echo -e "${YELLOW}Building miner...${NC}"
                proot-distro login $os_name -- ./miner-setup.sh
                install_virtual_cpu
                fix_common_issues
                
                if verify_miner_installation $os_name; then
                    echo -e "${GREEN}Auto-setup completed successfully!${NC}"
                    read -p "Start mining now? (y/n): " start_now
                    if [ "$start_now" = "y" ]; then
                        create_mining_script $os_name $pool $wallet $worker
                        proot-distro login $os_name -- ./start-mining.sh
                    fi
                else
                    echo -e "${RED}Auto-setup completed with errors. Please check installation.${NC}"
                fi
                ;;
            9)
                echo -e "${GREEN}Thank you for using Verus Miner!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid option!${NC}"
                ;;
        esac
    done
}

# Initial setup check
initial_setup() {
    show_banner
    echo -e "${YELLOW}Checking system requirements...${NC}"
    
    # Check if running in Termux
    if [ ! -d "/data/data/com.termux" ]; then
        echo -e "${RED}Warning: This script is optimized for Termux on Android${NC}"
        echo -e "${YELLOW}Some features may not work properly.${NC}"
        sleep 2
    fi
    
    # Update packages
    echo -e "${BLUE}Updating base system...${NC}"
    animate_loading "update" &
    loading_pid=$!
    
    pkg update -y > /dev/null 2>&1
    pkg upgrade -y > /dev/null 2>&1
    
    wait $loading_pid
    echo -e "${GREEN}System updated!${NC}"
}

# Main execution
main() {
    initial_setup
    main_menu
}

# Run main function
main "$@"
